{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Regression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 線性迴歸"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 直線\n",
    "\n",
    "$$f(x) = 1.2x + 0.8$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.         0.10204082 0.20408163 0.30612245 0.40816327 0.51020408\n",
      " 0.6122449  0.71428571 0.81632653 0.91836735 1.02040816 1.12244898\n",
      " 1.2244898  1.32653061 1.42857143 1.53061224 1.63265306 1.73469388\n",
      " 1.83673469 1.93877551 2.04081633 2.14285714 2.24489796 2.34693878\n",
      " 2.44897959 2.55102041 2.65306122 2.75510204 2.85714286 2.95918367\n",
      " 3.06122449 3.16326531 3.26530612 3.36734694 3.46938776 3.57142857\n",
      " 3.67346939 3.7755102  3.87755102 3.97959184 4.08163265 4.18367347\n",
      " 4.28571429 4.3877551  4.48979592 4.59183673 4.69387755 4.79591837\n",
      " 4.89795918 5.        ]\n"
     ]
    }
   ],
   "source": [
    "#準備 50 個點\n",
    "x = np.linspace(0, 5, 50)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.8       , 0.92244898, 1.04489796, 1.16734694, 1.28979592,\n",
       "       1.4122449 , 1.53469388, 1.65714286, 1.77959184, 1.90204082,\n",
       "       2.0244898 , 2.14693878, 2.26938776, 2.39183673, 2.51428571,\n",
       "       2.63673469, 2.75918367, 2.88163265, 3.00408163, 3.12653061,\n",
       "       3.24897959, 3.37142857, 3.49387755, 3.61632653, 3.73877551,\n",
       "       3.86122449, 3.98367347, 4.10612245, 4.22857143, 4.35102041,\n",
       "       4.47346939, 4.59591837, 4.71836735, 4.84081633, 4.96326531,\n",
       "       5.08571429, 5.20816327, 5.33061224, 5.45306122, 5.5755102 ,\n",
       "       5.69795918, 5.82040816, 5.94285714, 6.06530612, 6.1877551 ,\n",
       "       6.31020408, 6.43265306, 6.55510204, 6.67755102, 6.8       ])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = 1.2*x + 0.8\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x23737a084a8>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#畫圖\n",
    "plt.scatter(x,y)\n",
    "plt.plot(x, 1.2*x+0.8, 'r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### add noise \n",
    "\n",
    "$$f(x) + \\varepsilon(x)$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.85529535 -0.20750179  1.98110383  1.46611209  1.89930835  0.66992277\n",
      "  2.48661665  1.42835981  1.14287868  2.16864772  2.16102537  1.48895302\n",
      "  2.67280144  2.51977906  2.61318225  1.06780488  2.6463725   1.82338293\n",
      "  2.9524967   2.87333423  4.22965225  2.46441162  3.38091916  4.22669757\n",
      "  4.89978373  4.38807475  4.23873627  3.72621185  4.08661907  4.05130342\n",
      "  4.62268089  5.02854348  4.83319296  4.12537617  6.51160079  5.3774786\n",
      "  6.1407049   5.48913763  5.51967703  4.82584722  5.37609399  6.42538241\n",
      "  5.96839835  6.36929298  7.03179684  6.30855351  6.00176819  7.8601521\n",
      "  6.60815411  6.32541646]\n"
     ]
    }
   ],
   "source": [
    "y = 1.2*x + 0.8 + 0.6*np.random.randn(50)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x23737d26940>]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x, 1.2*x + 0.8, 'r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "regr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(50, 1)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(x.shape)\n",
    "X = x.reshape(-1,1)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "$$[x_1, x_2, \\ldots, x_{50}]$$\n",
    "\n",
    "==> \n",
    "\n",
    "$$[[x_1], [x_2], \\ldots, [x_{50}]]$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.70776908 0.83655527 0.96534146 1.09412765 1.22291383 1.35170002\n",
      " 1.48048621 1.6092724  1.73805858 1.86684477 1.99563096 2.12441715\n",
      " 2.25320334 2.38198952 2.51077571 2.6395619  2.76834809 2.89713427\n",
      " 3.02592046 3.15470665 3.28349284 3.41227903 3.54106521 3.6698514\n",
      " 3.79863759 3.92742378 4.05620996 4.18499615 4.31378234 4.44256853\n",
      " 4.57135472 4.7001409  4.82892709 4.95771328 5.08649947 5.21528565\n",
      " 5.34407184 5.47285803 5.60164422 5.73043041 5.85921659 5.98800278\n",
      " 6.11678897 6.24557516 6.37436134 6.50314753 6.63193372 6.76071991\n",
      " 6.8895061  7.01829228]\n"
     ]
    }
   ],
   "source": [
    "Y = regr.predict(X)\n",
    "print(Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'copy_X': True, 'fit_intercept': True, 'n_jobs': None, 'normalize': False}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#了解你的訓練參數\n",
    "regr.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.40948727720492434\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x, y)\n",
    "plt.plot(x, Y, 'ro')\n",
    "#calculate mse\n",
    "mse = np.sum((Y-y)**2) / len(y)\n",
    "print(mse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. 函數訓練and測試\n",
    "\n",
    "#### 訓練資料、測試資料\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "80%  training data, 20%  testing data ==> 先利用此來驗證各種模型(演算法)的好壞及調好到最佳參數\n",
    "之後可以利用由這個80%的訓練資料所得的模型後,拿100%資料re-train模型以得到最佳模型 (此model會更佳fit data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3.36734694 3.57142857 2.65306122 3.46938776 1.83673469 0.71428571\n",
      " 1.42857143 4.59183673 4.89795918 2.95918367 1.53061224 3.06122449\n",
      " 3.26530612 1.63265306 4.28571429 2.04081633 4.3877551  0.81632653\n",
      " 1.32653061 2.55102041 0.51020408 1.73469388 4.08163265 5.\n",
      " 0.10204082 1.2244898  3.7755102  2.44897959 0.6122449  2.34693878\n",
      " 3.67346939 2.14285714 1.93877551 0.91836735 3.97959184 4.69387755\n",
      " 0.30612245 0.         4.79591837 4.48979592]\n"
     ]
    }
   ],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n",
    "print(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2373a5a8438>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 用訓練資料來 fit 函數\n",
    "\n",
    "記得現在我們只用 80% 的資料去訓練。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [1.29037475]\n",
      "interception:  0.6083629388134932\n"
     ]
    }
   ],
   "source": [
    "regr = LinearRegression()\n",
    "X_train = x_train.reshape(-1,1)\n",
    "regr.fit(X_train,y_train)\n",
    "print('Coefficients: ', regr.coef_)\n",
    "print('interception: ', regr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train = regr.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4465274588937419\n"
     ]
    }
   ],
   "source": [
    "mse = np.sum((Y_train-y_train)**2) / len(y_train)\n",
    "print(mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2373a5a8a58>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x_train, y_train)\n",
    "plt.plot(x_train, Y_train, 'r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### test with test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2.85714286]\n",
      " [1.12244898]\n",
      " [1.02040816]\n",
      " [4.18367347]\n",
      " [0.20408163]\n",
      " [2.75510204]\n",
      " [3.87755102]\n",
      " [3.16326531]\n",
      " [2.24489796]\n",
      " [0.40816327]]\n",
      "[4.29514795 2.05674276 1.92507187 6.00686956 0.87170473 4.16347705\n",
      " 5.61185688 4.69016063 3.50512259 1.13504651]\n"
     ]
    }
   ],
   "source": [
    "X_test = x_test.reshape(-1,1)\n",
    "Y_test = regr.predict(X_test)\n",
    "print(X_test)\n",
    "print(Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\widehat{y}=xw+b=w_{1}x_{1}+b$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[4.29514795],\n",
       "       [2.05674276],\n",
       "       [1.92507187],\n",
       "       [6.00686956],\n",
       "       [0.87170473],\n",
       "       [4.16347705],\n",
       "       [5.61185688],\n",
       "       [4.69016063],\n",
       "       [3.50512259],\n",
       "       [1.13504651]])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Y=WX+b\n",
    "W=regr.coef_\n",
    "b=regr.intercept_\n",
    "W*X_test+b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2741186503858739\n"
     ]
    }
   ],
   "source": [
    "mse = np.sum((Y_test-y_test)**2) / len(y_test)\n",
    "print(mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x23738504f98>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x_test, y_test)\n",
    "plt.scatter(x_test, Y_test, c='r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Nonlinear\n",
    "\n",
    "$$f(x) = \\sin(3.2x) + 0.8x$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. 生成假資料"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.linspace(0, 5, 100)\n",
    "y = np.sin(3.2*x) + 0.8*x + 0.3*np.random.randn(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x2373a6da518>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### nonlinear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "regr_lin = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 1)\n"
     ]
    }
   ],
   "source": [
    "X = x.reshape(-1, 1)\n",
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr_lin.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.639314801073646\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Y=regr_lin.predict(X)\n",
    "plt.scatter(x,y)\n",
    "plt.plot(x,Y , 'r')\n",
    "mse = np.sum((Y-y)**2) / len(y)\n",
    "print(mse)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "果然超級不準, 該如何是好?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 多項式\n",
    "\n",
    "多項式5次方"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(100, 5)\n"
     ]
    }
   ],
   "source": [
    "X_poly = np.array([[k, k**2, k**3, k**4, k**5] for k in x])  # add k**6 to try it\n",
    "print(X_poly.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "regr_poly = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regr_poly.fit(X_poly, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2373a75d4e0>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x, regr_poly.predict(X_poly), 'r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [-1.88820693  2.43301362 -1.09544434  0.23099068 -0.01773054]\n",
      "interception:  1.179774010108439\n"
     ]
    }
   ],
   "source": [
    "print('Coefficients: ', regr_poly.coef_)\n",
    "print('interception: ', regr_poly.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\widehat{y}=xw+b=w_{1}x_{1}+w_{2}x_{2}+w_{3}x_{3}+w_{4}x_{4}+w_{5}x_{5}+b$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.17977401, 1.09047643, 1.01276506, 0.94584638, 0.88896158,\n",
       "       0.84138579, 0.80242743, 0.7714275 , 0.74775885, 0.73082552,\n",
       "       0.72006204, 0.7149327 , 0.71493087, 0.71957831, 0.72842444,\n",
       "       0.74104568, 0.75704473, 0.77604986, 0.79771423, 0.8217152 ,\n",
       "       0.84775357, 0.87555299, 0.90485913, 0.9354391 , 0.96708068,\n",
       "       0.99959163, 1.032799  , 1.06654845, 1.10070352, 1.13514493,\n",
       "       1.16976992, 1.2044915 , 1.2392378 , 1.27395131, 1.30858826,\n",
       "       1.34311784, 1.37752155, 1.41179251, 1.44593471, 1.47996236,\n",
       "       1.51389917, 1.54777764, 1.58163838, 1.61552941, 1.64950546,\n",
       "       1.68362725, 1.71796081, 1.75257678, 1.78754973, 1.8229574 ,\n",
       "       1.85888006, 1.89539981, 1.93259982, 1.97056371, 2.00937479,\n",
       "       2.04911539, 2.08986618, 2.1317054 , 2.17470825, 2.21894611,\n",
       "       2.26448591, 2.31138939, 2.3597124 , 2.40950422, 2.46080685,\n",
       "       2.51365432, 2.56807197, 2.62407576, 2.68167161, 2.74085462,\n",
       "       2.80160846, 2.86390459, 2.92770162, 2.99294459, 3.05956427,\n",
       "       3.12747644, 3.19658124, 3.26676244, 3.33788671, 3.409803  ,\n",
       "       3.48234177, 3.55531432, 3.62851209, 3.70170595, 3.77464553,\n",
       "       3.84705846, 3.91864975, 3.98910104, 4.0580699 , 4.12518915,\n",
       "       4.19006615, 4.25228212, 4.31139141, 4.36692082, 4.4183689 ,\n",
       "       4.46520524, 4.50686979, 4.54277214, 4.57229083, 4.59477267])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "W=regr_poly.coef_\n",
    "b=regr_poly.intercept_\n",
    "np.dot(X_poly,W.T)+b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### RBF\n",
    "\n",
    "$$\\phi_i = e^{-\\| x - c_i \\|^2/2\\sigma^2}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RBF(x, center, sigma):\n",
    "    k = np.exp(-(x - center)**2/(2*sigma**2))\n",
    "    return k"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "sigma = 0.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-38-3b84634ba9b9>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-38-3b84634ba9b9>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    X_rbf = np.array([[RBF(k, ..5, sigma),\u001b[0m\n\u001b[1;37m                              ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "X_rbf = np.array([[RBF(k, ..5, sigma), \n",
    "                  RBF(k, 1.5, sigma),\n",
    "                  RBF(k, 2.5, sigma),\n",
    "                  RBF(k, 3.5, sigma),\n",
    "                  RBF(k, 4.5, sigma)] for k in x])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "regr_rbf = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "regr_rbf.fit(X_rbf, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.plot(x, regr_rbf.predict(X_rbf), 'r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Coefficients: ', regr_rbf.coef_)\n",
    "print('interception: ', regr_rbf.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_lin = regr_lin.predict(X)\n",
    "Y_poly = regr_poly.predict(X_poly)\n",
    "Y_rbf = regr_rbf.predict(X_rbf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plt.scatter(x,y)\n",
    "\n",
    "plt.plot(x, Y_lin, label='linear')\n",
    "plt.plot(x, Y_poly, label='polynomial')\n",
    "plt.plot(x, Y_rbf, label='rbf')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## 請計算模型的MSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.sum((regr_lin.predict(X)-y)**2) / len(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.sum((regr_poly.predict(X_poly)-y)**2) / len(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(np.sum((regr_rbf.predict(X_rbf)-y)**2) / len(y))"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
