{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 線性回歸分析: Property value prediction\n",
    "\n",
    "此檔案使用scikit-learn 機器學習套件裡的linear regression演算法，來達成波士頓房地產價錢預測\n",
    "\n",
    "    資料集：波士頓房產\n",
    "    特徵：房地產客觀數據，如年份、平面大小\n",
    "    預測目標：房地產價格\n",
    "    機器學習方法：線性迴歸\n",
    "    探討重點：10 等分的交叉驗証(10-fold Cross-Validation)來實際測試資料以及預測值的關係\n",
    "    關鍵函式： sklearn.cross_validation.cross_val_predict；joblib.dump；joblib.load\n",
    "https://scikit-learn.org/stable/modules/cross_validation.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (一)波士頓房地產資料庫\n",
    "\n",
    "引入之函式庫如下\n",
    "\n",
    "    sklearn.datasets: 用來匯入內建之波士頓房地產資料庫\n",
    "    sklearn.cross_val_score: 使用交叉驗證用來評估辨識準確度\n",
    "    sklearn.linear_model: 線性分析之模組\n",
    "    matplotlib.pyplot: 用來繪製影像"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from sklearn import datasets\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "from sklearn import linear_model\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.externals import joblib\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_items([('data', array([[6.3200e-03, 1.8000e+01, 2.3100e+00, ..., 1.5300e+01, 3.9690e+02,\n",
       "        4.9800e+00],\n",
       "       [2.7310e-02, 0.0000e+00, 7.0700e+00, ..., 1.7800e+01, 3.9690e+02,\n",
       "        9.1400e+00],\n",
       "       [2.7290e-02, 0.0000e+00, 7.0700e+00, ..., 1.7800e+01, 3.9283e+02,\n",
       "        4.0300e+00],\n",
       "       ...,\n",
       "       [6.0760e-02, 0.0000e+00, 1.1930e+01, ..., 2.1000e+01, 3.9690e+02,\n",
       "        5.6400e+00],\n",
       "       [1.0959e-01, 0.0000e+00, 1.1930e+01, ..., 2.1000e+01, 3.9345e+02,\n",
       "        6.4800e+00],\n",
       "       [4.7410e-02, 0.0000e+00, 1.1930e+01, ..., 2.1000e+01, 3.9690e+02,\n",
       "        7.8800e+00]])), ('target', array([24. , 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, 16.5, 18.9, 15. ,\n",
       "       18.9, 21.7, 20.4, 18.2, 19.9, 23.1, 17.5, 20.2, 18.2, 13.6, 19.6,\n",
       "       15.2, 14.5, 15.6, 13.9, 16.6, 14.8, 18.4, 21. , 12.7, 14.5, 13.2,\n",
       "       13.1, 13.5, 18.9, 20. , 21. , 24.7, 30.8, 34.9, 26.6, 25.3, 24.7,\n",
       "       21.2, 19.3, 20. , 16.6, 14.4, 19.4, 19.7, 20.5, 25. , 23.4, 18.9,\n",
       "       35.4, 24.7, 31.6, 23.3, 19.6, 18.7, 16. , 22.2, 25. , 33. , 23.5,\n",
       "       19.4, 22. , 17.4, 20.9, 24.2, 21.7, 22.8, 23.4, 24.1, 21.4, 20. ,\n",
       "       20.8, 21.2, 20.3, 28. , 23.9, 24.8, 22.9, 23.9, 26.6, 22.5, 22.2,\n",
       "       23.6, 28.7, 22.6, 22. , 22.9, 25. , 20.6, 28.4, 21.4, 38.7, 43.8,\n",
       "       33.2, 27.5, 26.5, 18.6, 19.3, 20.1, 19.5, 19.5, 20.4, 19.8, 19.4,\n",
       "       21.7, 22.8, 18.8, 18.7, 18.5, 18.3, 21.2, 19.2, 20.4, 19.3, 22. ,\n",
       "       20.3, 20.5, 17.3, 18.8, 21.4, 15.7, 16.2, 18. , 14.3, 19.2, 19.6,\n",
       "       23. , 18.4, 15.6, 18.1, 17.4, 17.1, 13.3, 17.8, 14. , 14.4, 13.4,\n",
       "       15.6, 11.8, 13.8, 15.6, 14.6, 17.8, 15.4, 21.5, 19.6, 15.3, 19.4,\n",
       "       17. , 15.6, 13.1, 41.3, 24.3, 23.3, 27. , 50. , 50. , 50. , 22.7,\n",
       "       25. , 50. , 23.8, 23.8, 22.3, 17.4, 19.1, 23.1, 23.6, 22.6, 29.4,\n",
       "       23.2, 24.6, 29.9, 37.2, 39.8, 36.2, 37.9, 32.5, 26.4, 29.6, 50. ,\n",
       "       32. , 29.8, 34.9, 37. , 30.5, 36.4, 31.1, 29.1, 50. , 33.3, 30.3,\n",
       "       34.6, 34.9, 32.9, 24.1, 42.3, 48.5, 50. , 22.6, 24.4, 22.5, 24.4,\n",
       "       20. , 21.7, 19.3, 22.4, 28.1, 23.7, 25. , 23.3, 28.7, 21.5, 23. ,\n",
       "       26.7, 21.7, 27.5, 30.1, 44.8, 50. , 37.6, 31.6, 46.7, 31.5, 24.3,\n",
       "       31.7, 41.7, 48.3, 29. , 24. , 25.1, 31.5, 23.7, 23.3, 22. , 20.1,\n",
       "       22.2, 23.7, 17.6, 18.5, 24.3, 20.5, 24.5, 26.2, 24.4, 24.8, 29.6,\n",
       "       42.8, 21.9, 20.9, 44. , 50. , 36. , 30.1, 33.8, 43.1, 48.8, 31. ,\n",
       "       36.5, 22.8, 30.7, 50. , 43.5, 20.7, 21.1, 25.2, 24.4, 35.2, 32.4,\n",
       "       32. , 33.2, 33.1, 29.1, 35.1, 45.4, 35.4, 46. , 50. , 32.2, 22. ,\n",
       "       20.1, 23.2, 22.3, 24.8, 28.5, 37.3, 27.9, 23.9, 21.7, 28.6, 27.1,\n",
       "       20.3, 22.5, 29. , 24.8, 22. , 26.4, 33.1, 36.1, 28.4, 33.4, 28.2,\n",
       "       22.8, 20.3, 16.1, 22.1, 19.4, 21.6, 23.8, 16.2, 17.8, 19.8, 23.1,\n",
       "       21. , 23.8, 23.1, 20.4, 18.5, 25. , 24.6, 23. , 22.2, 19.3, 22.6,\n",
       "       19.8, 17.1, 19.4, 22.2, 20.7, 21.1, 19.5, 18.5, 20.6, 19. , 18.7,\n",
       "       32.7, 16.5, 23.9, 31.2, 17.5, 17.2, 23.1, 24.5, 26.6, 22.9, 24.1,\n",
       "       18.6, 30.1, 18.2, 20.6, 17.8, 21.7, 22.7, 22.6, 25. , 19.9, 20.8,\n",
       "       16.8, 21.9, 27.5, 21.9, 23.1, 50. , 50. , 50. , 50. , 50. , 13.8,\n",
       "       13.8, 15. , 13.9, 13.3, 13.1, 10.2, 10.4, 10.9, 11.3, 12.3,  8.8,\n",
       "        7.2, 10.5,  7.4, 10.2, 11.5, 15.1, 23.2,  9.7, 13.8, 12.7, 13.1,\n",
       "       12.5,  8.5,  5. ,  6.3,  5.6,  7.2, 12.1,  8.3,  8.5,  5. , 11.9,\n",
       "       27.9, 17.2, 27.5, 15. , 17.2, 17.9, 16.3,  7. ,  7.2,  7.5, 10.4,\n",
       "        8.8,  8.4, 16.7, 14.2, 20.8, 13.4, 11.7,  8.3, 10.2, 10.9, 11. ,\n",
       "        9.5, 14.5, 14.1, 16.1, 14.3, 11.7, 13.4,  9.6,  8.7,  8.4, 12.8,\n",
       "       10.5, 17.1, 18.4, 15.4, 10.8, 11.8, 14.9, 12.6, 14.1, 13. , 13.4,\n",
       "       15.2, 16.1, 17.8, 14.9, 14.1, 12.7, 13.5, 14.9, 20. , 16.4, 17.7,\n",
       "       19.5, 20.2, 21.4, 19.9, 19. , 19.1, 19.1, 20.1, 19.9, 19.6, 23.2,\n",
       "       29.8, 13.8, 13.3, 16.7, 12. , 14.6, 21.4, 23. , 23.7, 25. , 21.8,\n",
       "       20.6, 21.2, 19.1, 20.6, 15.2,  7. ,  8.1, 13.6, 20.1, 21.8, 24.5,\n",
       "       23.1, 19.7, 18.3, 21.2, 17.5, 16.8, 22.4, 20.6, 23.9, 22. , 11.9])), ('feature_names', array(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD',\n",
       "       'TAX', 'PTRATIO', 'B', 'LSTAT'], dtype='<U7')), ('DESCR', \".. _boston_dataset:\\n\\nBoston house prices dataset\\n---------------------------\\n\\n**Data Set Characteristics:**  \\n\\n    :Number of Instances: 506 \\n\\n    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\\n\\n    :Attribute Information (in order):\\n        - CRIM     per capita crime rate by town\\n        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\\n        - INDUS    proportion of non-retail business acres per town\\n        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\\n        - NOX      nitric oxides concentration (parts per 10 million)\\n        - RM       average number of rooms per dwelling\\n        - AGE      proportion of owner-occupied units built prior to 1940\\n        - DIS      weighted distances to five Boston employment centres\\n        - RAD      index of accessibility to radial highways\\n        - TAX      full-value property-tax rate per $10,000\\n        - PTRATIO  pupil-teacher ratio by town\\n        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\\n        - LSTAT    % lower status of the population\\n        - MEDV     Median value of owner-occupied homes in $1000's\\n\\n    :Missing Attribute Values: None\\n\\n    :Creator: Harrison, D. and Rubinfeld, D.L.\\n\\nThis is a copy of UCI ML housing dataset.\\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/housing/\\n\\n\\nThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\\n\\nThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\\nprices and the demand for clean air', J. Environ. Economics & Management,\\nvol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\\n...', Wiley, 1980.   N.B. Various transformations are used in the table on\\npages 244-261 of the latter.\\n\\nThe Boston house-price data has been used in many machine learning papers that address regression\\nproblems.   \\n     \\n.. topic:: References\\n\\n   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\\n   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\\n\"), ('filename', 'C:\\\\Users\\\\Joseph\\\\Anaconda3\\\\lib\\\\site-packages\\\\sklearn\\\\datasets\\\\data\\\\boston_house_prices.csv')])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boston.items() \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data (506, 13)\n",
      "target (506,)\n",
      "feature_names (13,)\n",
      ".. _boston_dataset:\n",
      "\n",
      "Boston house prices dataset\n",
      "---------------------------\n",
      "\n",
      "**Data Set Characteristics:**  \n",
      "\n",
      "    :Number of Instances: 506 \n",
      "\n",
      "    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n",
      "\n",
      "    :Attribute Information (in order):\n",
      "        - CRIM     per capita crime rate by town\n",
      "        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n",
      "        - INDUS    proportion of non-retail business acres per town\n",
      "        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n",
      "        - NOX      nitric oxides concentration (parts per 10 million)\n",
      "        - RM       average number of rooms per dwelling\n",
      "        - AGE      proportion of owner-occupied units built prior to 1940\n",
      "        - DIS      weighted distances to five Boston employment centres\n",
      "        - RAD      index of accessibility to radial highways\n",
      "        - TAX      full-value property-tax rate per $10,000\n",
      "        - PTRATIO  pupil-teacher ratio by town\n",
      "        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n",
      "        - LSTAT    % lower status of the population\n",
      "        - MEDV     Median value of owner-occupied homes in $1000's\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "\n",
      "    :Creator: Harrison, D. and Rubinfeld, D.L.\n",
      "\n",
      "This is a copy of UCI ML housing dataset.\n",
      "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n",
      "\n",
      "\n",
      "This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n",
      "\n",
      "The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\n",
      "prices and the demand for clean air', J. Environ. Economics & Management,\n",
      "vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n",
      "...', Wiley, 1980.   N.B. Various transformations are used in the table on\n",
      "pages 244-261 of the latter.\n",
      "\n",
      "The Boston house-price data has been used in many machine learning papers that address regression\n",
      "problems.   \n",
      "     \n",
      ".. topic:: References\n",
      "\n",
      "   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n",
      "   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n",
      "\n",
      "C:\\Users\\Joseph\\Anaconda3\\lib\\site-packages\\sklearn\\datasets\\data\\boston_house_prices.csv\n"
     ]
    }
   ],
   "source": [
    "\n",
    "boston = datasets.load_boston()\n",
    "\n",
    "for key,value in boston.items() :      ##顯示資料數\n",
    "    try:\n",
    "        print (key,value.shape)\n",
    "    except:\n",
    "        print (boston[key])\n",
    "\n",
    "y=boston.target\n",
    "#print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([24. , 21.6, 34.7, 33.4, 36.2, 28.7, 22.9, 27.1, 16.5, 18.9, 15. ,\n",
       "       18.9, 21.7, 20.4, 18.2, 19.9, 23.1, 17.5, 20.2, 18.2, 13.6, 19.6,\n",
       "       15.2, 14.5, 15.6, 13.9, 16.6, 14.8, 18.4, 21. , 12.7, 14.5, 13.2,\n",
       "       13.1, 13.5, 18.9, 20. , 21. , 24.7, 30.8, 34.9, 26.6, 25.3, 24.7,\n",
       "       21.2, 19.3, 20. , 16.6, 14.4, 19.4, 19.7, 20.5, 25. , 23.4, 18.9,\n",
       "       35.4, 24.7, 31.6, 23.3, 19.6, 18.7, 16. , 22.2, 25. , 33. , 23.5,\n",
       "       19.4, 22. , 17.4, 20.9, 24.2, 21.7, 22.8, 23.4, 24.1, 21.4, 20. ,\n",
       "       20.8, 21.2, 20.3, 28. , 23.9, 24.8, 22.9, 23.9, 26.6, 22.5, 22.2,\n",
       "       23.6, 28.7, 22.6, 22. , 22.9, 25. , 20.6, 28.4, 21.4, 38.7, 43.8,\n",
       "       33.2, 27.5, 26.5, 18.6, 19.3, 20.1, 19.5, 19.5, 20.4, 19.8, 19.4,\n",
       "       21.7, 22.8, 18.8, 18.7, 18.5, 18.3, 21.2, 19.2, 20.4, 19.3, 22. ,\n",
       "       20.3, 20.5, 17.3, 18.8, 21.4, 15.7, 16.2, 18. , 14.3, 19.2, 19.6,\n",
       "       23. , 18.4, 15.6, 18.1, 17.4, 17.1, 13.3, 17.8, 14. , 14.4, 13.4,\n",
       "       15.6, 11.8, 13.8, 15.6, 14.6, 17.8, 15.4, 21.5, 19.6, 15.3, 19.4,\n",
       "       17. , 15.6, 13.1, 41.3, 24.3, 23.3, 27. , 50. , 50. , 50. , 22.7,\n",
       "       25. , 50. , 23.8, 23.8, 22.3, 17.4, 19.1, 23.1, 23.6, 22.6, 29.4,\n",
       "       23.2, 24.6, 29.9, 37.2, 39.8, 36.2, 37.9, 32.5, 26.4, 29.6, 50. ,\n",
       "       32. , 29.8, 34.9, 37. , 30.5, 36.4, 31.1, 29.1, 50. , 33.3, 30.3,\n",
       "       34.6, 34.9, 32.9, 24.1, 42.3, 48.5, 50. , 22.6, 24.4, 22.5, 24.4,\n",
       "       20. , 21.7, 19.3, 22.4, 28.1, 23.7, 25. , 23.3, 28.7, 21.5, 23. ,\n",
       "       26.7, 21.7, 27.5, 30.1, 44.8, 50. , 37.6, 31.6, 46.7, 31.5, 24.3,\n",
       "       31.7, 41.7, 48.3, 29. , 24. , 25.1, 31.5, 23.7, 23.3, 22. , 20.1,\n",
       "       22.2, 23.7, 17.6, 18.5, 24.3, 20.5, 24.5, 26.2, 24.4, 24.8, 29.6,\n",
       "       42.8, 21.9, 20.9, 44. , 50. , 36. , 30.1, 33.8, 43.1, 48.8, 31. ,\n",
       "       36.5, 22.8, 30.7, 50. , 43.5, 20.7, 21.1, 25.2, 24.4, 35.2, 32.4,\n",
       "       32. , 33.2, 33.1, 29.1, 35.1, 45.4, 35.4, 46. , 50. , 32.2, 22. ,\n",
       "       20.1, 23.2, 22.3, 24.8, 28.5, 37.3, 27.9, 23.9, 21.7, 28.6, 27.1,\n",
       "       20.3, 22.5, 29. , 24.8, 22. , 26.4, 33.1, 36.1, 28.4, 33.4, 28.2,\n",
       "       22.8, 20.3, 16.1, 22.1, 19.4, 21.6, 23.8, 16.2, 17.8, 19.8, 23.1,\n",
       "       21. , 23.8, 23.1, 20.4, 18.5, 25. , 24.6, 23. , 22.2, 19.3, 22.6,\n",
       "       19.8, 17.1, 19.4, 22.2, 20.7, 21.1, 19.5, 18.5, 20.6, 19. , 18.7,\n",
       "       32.7, 16.5, 23.9, 31.2, 17.5, 17.2, 23.1, 24.5, 26.6, 22.9, 24.1,\n",
       "       18.6, 30.1, 18.2, 20.6, 17.8, 21.7, 22.7, 22.6, 25. , 19.9, 20.8,\n",
       "       16.8, 21.9, 27.5, 21.9, 23.1, 50. , 50. , 50. , 50. , 50. , 13.8,\n",
       "       13.8, 15. , 13.9, 13.3, 13.1, 10.2, 10.4, 10.9, 11.3, 12.3,  8.8,\n",
       "        7.2, 10.5,  7.4, 10.2, 11.5, 15.1, 23.2,  9.7, 13.8, 12.7, 13.1,\n",
       "       12.5,  8.5,  5. ,  6.3,  5.6,  7.2, 12.1,  8.3,  8.5,  5. , 11.9,\n",
       "       27.9, 17.2, 27.5, 15. , 17.2, 17.9, 16.3,  7. ,  7.2,  7.5, 10.4,\n",
       "        8.8,  8.4, 16.7, 14.2, 20.8, 13.4, 11.7,  8.3, 10.2, 10.9, 11. ,\n",
       "        9.5, 14.5, 14.1, 16.1, 14.3, 11.7, 13.4,  9.6,  8.7,  8.4, 12.8,\n",
       "       10.5, 17.1, 18.4, 15.4, 10.8, 11.8, 14.9, 12.6, 14.1, 13. , 13.4,\n",
       "       15.2, 16.1, 17.8, 14.9, 14.1, 12.7, 13.5, 14.9, 20. , 16.4, 17.7,\n",
       "       19.5, 20.2, 21.4, 19.9, 19. , 19.1, 19.1, 20.1, 19.9, 19.6, 23.2,\n",
       "       29.8, 13.8, 13.3, 16.7, 12. , 14.6, 21.4, 23. , 23.7, 25. , 21.8,\n",
       "       20.6, 21.2, 19.1, 20.6, 15.2,  7. ,  8.1, 13.6, 20.1, 21.8, 24.5,\n",
       "       23.1, 19.7, 18.3, 21.2, 17.5, 16.8, 22.4, 20.6, 23.9, 22. , 11.9])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boston['feature_names']\n",
    "boston['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "x = pd.DataFrame(boston['data'], columns=boston['feature_names'])\n",
    "y = pd.DataFrame(boston['target'],columns=['target'])\n",
    "#data = pd.concat([x,y], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.02985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.430</td>\n",
       "      <td>58.7</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.12</td>\n",
       "      <td>5.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.08829</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>6.012</td>\n",
       "      <td>66.6</td>\n",
       "      <td>5.5605</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>395.60</td>\n",
       "      <td>12.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.14455</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>6.172</td>\n",
       "      <td>96.1</td>\n",
       "      <td>5.9505</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>396.90</td>\n",
       "      <td>19.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.21124</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>5.631</td>\n",
       "      <td>100.0</td>\n",
       "      <td>6.0821</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>386.63</td>\n",
       "      <td>29.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.17004</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>6.004</td>\n",
       "      <td>85.9</td>\n",
       "      <td>6.5921</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>386.71</td>\n",
       "      <td>17.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM    AGE     DIS  RAD    TAX  \\\n",
       "0  0.00632  18.0   2.31   0.0  0.538  6.575   65.2  4.0900  1.0  296.0   \n",
       "1  0.02731   0.0   7.07   0.0  0.469  6.421   78.9  4.9671  2.0  242.0   \n",
       "2  0.02729   0.0   7.07   0.0  0.469  7.185   61.1  4.9671  2.0  242.0   \n",
       "3  0.03237   0.0   2.18   0.0  0.458  6.998   45.8  6.0622  3.0  222.0   \n",
       "4  0.06905   0.0   2.18   0.0  0.458  7.147   54.2  6.0622  3.0  222.0   \n",
       "5  0.02985   0.0   2.18   0.0  0.458  6.430   58.7  6.0622  3.0  222.0   \n",
       "6  0.08829  12.5   7.87   0.0  0.524  6.012   66.6  5.5605  5.0  311.0   \n",
       "7  0.14455  12.5   7.87   0.0  0.524  6.172   96.1  5.9505  5.0  311.0   \n",
       "8  0.21124  12.5   7.87   0.0  0.524  5.631  100.0  6.0821  5.0  311.0   \n",
       "9  0.17004  12.5   7.87   0.0  0.524  6.004   85.9  6.5921  5.0  311.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  \n",
       "0     15.3  396.90   4.98  \n",
       "1     17.8  396.90   9.14  \n",
       "2     17.8  392.83   4.03  \n",
       "3     18.7  394.63   2.94  \n",
       "4     18.7  396.90   5.33  \n",
       "5     18.7  394.12   5.21  \n",
       "6     15.2  395.60  12.43  \n",
       "7     15.2  396.90  19.15  \n",
       "8     15.2  386.63  29.93  \n",
       "9     15.2  386.71  17.10  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.02985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.430</td>\n",
       "      <td>58.7</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.12</td>\n",
       "      <td>5.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.08829</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>6.012</td>\n",
       "      <td>66.6</td>\n",
       "      <td>5.5605</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>395.60</td>\n",
       "      <td>12.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.14455</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>6.172</td>\n",
       "      <td>96.1</td>\n",
       "      <td>5.9505</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>396.90</td>\n",
       "      <td>19.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.21124</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>5.631</td>\n",
       "      <td>100.0</td>\n",
       "      <td>6.0821</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>386.63</td>\n",
       "      <td>29.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.17004</td>\n",
       "      <td>12.5</td>\n",
       "      <td>7.87</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.524</td>\n",
       "      <td>6.004</td>\n",
       "      <td>85.9</td>\n",
       "      <td>6.5921</td>\n",
       "      <td>5.0</td>\n",
       "      <td>311.0</td>\n",
       "      <td>15.2</td>\n",
       "      <td>386.71</td>\n",
       "      <td>17.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM    AGE     DIS  RAD    TAX  \\\n",
       "1  0.02731   0.0   7.07   0.0  0.469  6.421   78.9  4.9671  2.0  242.0   \n",
       "2  0.02729   0.0   7.07   0.0  0.469  7.185   61.1  4.9671  2.0  242.0   \n",
       "3  0.03237   0.0   2.18   0.0  0.458  6.998   45.8  6.0622  3.0  222.0   \n",
       "4  0.06905   0.0   2.18   0.0  0.458  7.147   54.2  6.0622  3.0  222.0   \n",
       "5  0.02985   0.0   2.18   0.0  0.458  6.430   58.7  6.0622  3.0  222.0   \n",
       "6  0.08829  12.5   7.87   0.0  0.524  6.012   66.6  5.5605  5.0  311.0   \n",
       "7  0.14455  12.5   7.87   0.0  0.524  6.172   96.1  5.9505  5.0  311.0   \n",
       "8  0.21124  12.5   7.87   0.0  0.524  5.631  100.0  6.0821  5.0  311.0   \n",
       "9  0.17004  12.5   7.87   0.0  0.524  6.004   85.9  6.5921  5.0  311.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  \n",
       "1     17.8  396.90   9.14  \n",
       "2     17.8  392.83   4.03  \n",
       "3     18.7  394.63   2.94  \n",
       "4     18.7  396.90   5.33  \n",
       "5     18.7  394.12   5.21  \n",
       "6     15.2  395.60  12.43  \n",
       "7     15.2  396.90  19.15  \n",
       "8     15.2  386.63  29.93  \n",
       "9     15.2  386.71  17.10  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x[1:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>28.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>22.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>27.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   target\n",
       "0    24.0\n",
       "1    21.6\n",
       "2    34.7\n",
       "3    33.4\n",
       "4    36.2\n",
       "5    28.7\n",
       "6    22.9\n",
       "7    27.1\n",
       "8    16.5\n",
       "9    18.9"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(三)使用joblib.dump匯出預測器\n",
    "\n",
    "from sklearn.externals import joblib\n",
    "\n",
    "joblib.dump(lr,\"./lr_machine.pkl\")\n",
    "\n",
    "使用joblib.dump將線性回歸預測器匯出為pkl檔。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(四)訓練以及分類\n",
    "\n",
    "接著使用lr=joblib.load(\"./lr_machine.pkl\")將pkl檔匯入為一個linear regression預測器lr。\n",
    "\n",
    "接著使用波士頓房地產數據(boston.data)，以及預測目標(y)來訓練預測機lr lr.fit(boston.data, y)。\n",
    "\n",
    "最後，使用predict_y=lr.predict(boston.data[2])預測第三筆資料的價格，並將結果存入predicted_y變數。\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#匯出\n",
    "\n",
    "#joblib.dump(lr,\"./lr_machine.pkl\")\n",
    "#匯入\n",
    "#lr=joblib.load(\"./lr_machine.pkl\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(五)繪出預測結果與實際目標差異圖\n",
    "\n",
    "X軸為預測結果，Y軸為回歸目標。 並劃出一條斜率=1的理想曲線(用虛線標示)。\n",
    "\n",
    "紅點為房地產第三項數據的預測結果。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20.02045317]\n",
      "[15.2]\n",
      "[4.82045317]\n",
      "5.0\n",
      "50.0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr = linear_model.LinearRegression()\n",
    "lr.fit(x[:450], y[:450])\n",
    "\n",
    "predict_y=lr.predict(x[451:452])\n",
    "predicted=lr.predict(x[:450])\n",
    "plt.scatter(predicted,y[:450],s=2)\n",
    "plt.plot(predict_y, y[451:452], 'ro')\n",
    "plt.plot([y.min(), y.max()], [y.min(), y.max()], 'k-', lw=2)\n",
    "plt.xlim(0,60)\n",
    "plt.ylim(0,60)\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Measured')\n",
    "print(predict_y)\n",
    "print(y[451:452])\n",
    "print(predict_y-y[451:452])\n",
    "print(y.min())\n",
    "print(y.max())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## (二)cross-validation\n",
    "\n",
    " cross_val_predict(estimator, X, y=None, cv=None, n_jobs=1, verbose=0, fit_params=None, pre_dispatch='2*n_jobs')\n",
    "\n",
    "    X:機器學習數據\n",
    "    y:為回歸目標，\n",
    "    cv:Cross-Validation. integer, to specify the number of folds in a (Stratified) K-Fold,\n",
    "        交叉驗証時資料切分的依據，範例為10則將資料切分為10等分，以其中9等分為訓練集，另外一等分則為測試集。\n",
    "\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_predict.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(506,)\n",
      "[  -9.28694671  -14.15128316  -14.07360615  -35.20692433  -31.88511666\n",
      "  -19.83587796   -9.94726918 -168.37537954  -33.32974507  -10.96041068]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# cross_val_predict returns an array of the same size as `y` where each entry\n",
    "# is a prediction obtained by cross validated:\n",
    "\n",
    "#Evaluate a score by cross-validation\n",
    "score=cross_val_score(lr, x, y,scoring=\"neg_mean_squared_error\", cv=10) \n",
    "print(score)\n",
    "plt.plot(score)\n",
    "\n",
    "plt.ylabel('Cross-Validated Accuracy')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
